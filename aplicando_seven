#----------------PARTE 1-------------------------------------

# Importa as bibliotecas utilizadas
import sys, pygame
from pygame.locals import *
from random import *

# Inicializa a biblioteca pygame
pygame.init()

# Cria a surface 
size = (800, 600)
screen = pygame.display.set_mode(size)

# Define um titulo para a janela
pygame.display.set_caption("Papa Bolinhas")

#Carrega a imagem de fundo
imagem = pygame.image.load("Downloads/imagem_fundo.png")

# Define as cores em RGB
BLACK  = (0, 0, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)
RED = (128, 128, 128)

# Declarando a fonte do placar e variável contadora
font = pygame.font.SysFont('sans',40)
placar = 0

# Declara o vetor que controla a posicao X e Y do circulo 
posicaoPapaBolinhas = [400, 300]

# Armazena num vetor a Velocidade de movimentacao do circulo 
velocidadePapaBolinhas = [5, 5]

# Variável para iniciar a posição do círculo vermelho
criar = True

# Variáveis de posição do círculo vermelho
X_vermelho = 0
Y_vermelho = 0

# Velocidade do círculo vermelho
velocidade_vermelho = 15

# Variável para contagem de tempo, utilizado para controlar a velocidade de quadros (de atualizações da tela)
clock = pygame.time.Clock()

#criando objeto Clock
CLOCKTICK = pygame.USEREVENT+1
pygame.time.set_timer(CLOCKTICK, 1000) # configurado o timer do Pygame para execução a cada 1 segundo
temporizador = 60

#----------------PARTE 2-------------------------------------

# Loop principal do jogo
while True:
    
    # Verifica se algum evento aconteceu
    for event in pygame.event.get():
        # Verifica se foi um evento de saida (pygame.QUIT), 
        # em caso afirmativo fecha a aplicacao
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        #capturando evento de relogio a cada 1 segundo e atualizando a variável contadora
        if event.type == CLOCKTICK:
            temporizador = temporizador -1

    #finalizando o jogo
    if temporizador == 0:
        # desenhando um frame ocupando e escondendo toda a tela do usuário
        break

    # Verifica se alguma tecla foi pressionada, e captura o evento
    pressed = pygame.key.get_pressed()

    #Verifica qual tecla (seta) foi pressionada e atualiza o vetor Posicao de acordo com a Velocidade
    if pressed[pygame.K_UP]: posicaoPapaBolinhas[1] -= velocidadePapaBolinhas[1]
    if pressed[pygame.K_DOWN]: posicaoPapaBolinhas[1] += velocidadePapaBolinhas[1]
    if pressed[pygame.K_LEFT]: posicaoPapaBolinhas[0] -= velocidadePapaBolinhas[0]
    if pressed[pygame.K_RIGHT]: posicaoPapaBolinhas[0] += velocidadePapaBolinhas[0]

    #blita a imagem de fundo na tela
    screen.blit(imagem, (0, 0))

    # Desenha um circulo branco na tela
    pygame.draw.circle(screen, PURPLE, posicaoPapaBolinhas, 20)

    # Aqui é setado a posição inicial da bola vermelha
    if criar == True:
        X_vermelho = randint(40,800)
        Y_vermelho = 0
        criar = False

    # Desenha o círculo vermelho
    pygame.draw.circle(screen, RED, (X_vermelho, Y_vermelho), 10)

    # Atualiza a posição do círculo vermelho
    Y_vermelho += velocidade_vermelho

    # Se o círculo vermelho ultrapassar a tela, ele é reiniciado
    if Y_vermelho > 600:
        criar = True

    # Verifica se houve colisão entre o "Papa Bolinhas" e o círculo vermelho
    if abs(posicaoPapaBolinhas[0] - X_vermelho) < 20 and abs(posicaoPapaBolinhas[1] - Y_vermelho) < 20:
        # Inverte a direção da bolinha vermelha
        velocidade_vermelho *= -1
        # Incrementa o placar
        placar += 1
        # Toca o som de captura
        pygame.mixer.music.load('Downloads/catch.mp3')
        pygame.mixer.music.play(0)

    # renderizando as fontes do placar na tela
    score1 = font.render('Placar '+str(placar), True, (PURPLE))
    screen.blit(score1, (600, 50))

    #renderizando as fontes do cronometro na tela do usuario
    timer1 = font.render('Tempo ' + str(temporizador), True, (ORANGE))
    screen.blit(timer1, (50, 50))
        
    # Atualiza a tela visivel ao usuario
    pygame.display.flip()

    # Limita a taxa de quadros (framerate) a 60 quadros por segundo (60fps)
    clock.tick(60)

#final de jogo
#Limpando a tela do jogo
frame = pygame.draw.rect(screen, (PURPLE), Rect((0, 0), (800, 600)))


textofinal = font.render('Fim de Jogo - Placar final: ' + str(placar), True, (RED))
size = font.size(str(textofinal))
screen.blit(textofinal, (size[0]/2., size[1]/2.))


#atualizamos a tela com uma nova tela de informação final ao jogador
pygame.display.flip()
#pequeno loop game esperando o usuario encerrar
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
